import torch
import numpy as np


# def mutate(model, mu, var):
#
#     with torch.no_grad():
#         for name, param in model.named_parameters():
#             weighs = np.array(param.detach())
#             # print(name)
#             # print('  before: ', weighs)
#             weighs += np.random.normal(loc=mu, scale=var, size=param.shape)
#             model.state_dict()[name].data.copy_(torch.Tensor(weighs))
#             # print('  after weights: ', weighs)
#             # print('  after data: ', model.state_dict()[name].data)
#
#     # with torch.no_grad():
#     #     for name, param in model.named_parameters():
#     #         print(name)
#     #         print(param)
#     return model


# def mutation(self, idx, models):
#     Offspring = []
#     for pop_idx in idx:
#         parent = models[pop_idx]
#         parent = mutate(parent, 0.001)
#         Offspring.append(parent)
#     return Offspring


class Mutation_NN:

    def __init__(self, mu=0, var=0.001):
        # 网络产生的噪音服从正太分布
        self.mu = mu  # 噪音的标准差
        self.var = var  # 噪音的方差

    def do(self, OldChrom):  # 执行变异
        Offspring = []
        newChrom = OldChrom.copy()
        num_NN = len(OldChrom)
        with torch.no_grad():
            for idx in range(num_NN):
                parent = newChrom[idx]
                for name, param in parent.named_parameters():
                    weighs = np.array(param.detach())
                    # print(name)
                    # print('  before: ', weighs)
                    weighs += np.random.normal(loc=self.mu, scale=self.var, size=param.shape)
                    parent.state_dict()[name].data.copy_(torch.Tensor(weighs))
                Offspring.append(parent)

        return Offspring

    def getHelp(self):  # 查看内核中的变异算子的API文档
        print('do yourself!')





